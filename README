# MySQL Replication Project
This module configures a SQL database(s) in slave or master replication configuration by leveraging an Ubuntu 12.04LTS Vagrant VM.

Created so we can deploy multiple SQL servers on one machine slaved to many remote masters. 

For shits and giggles I also created a replicate::master script (explained below in detail) to provision the master DB's as masters of the slaves. 

## Replication Module Overview
#### Dependancies:
	
	Vagrant 											=> www.vagrantup.com
	Puppetlabs MySQL Module 							=> https://github.com/puppetlabs/puppetlabs-mysql
	Puppetlabs Arguas Module 							=> ?		
	Puppetlabs stdlib									=> https://github.com/puppetlabs/puppetlabs-stdlib
	Jeff Malnick's hella awesome replication module		=> https://github.com/malnick/puppet_replication_module
		-> hella awesome replication module is actually located in this github repo here on cartlogic, but Scott also let me opensource it. 
		
### replicate::slave{'$slave_name':}
This will provision a new SQL server as a slave. It does not modify existing MySQL servers or databases on the system.

### replicate::master{'$mysql_database':}
This will provision your existing MySQL server as a master of a slave instance - provided with the database you wish to replicate, DNS and slave user information. 
		
#### Compliant!
Module leverages a defined type class for either 'slave' or 'master' configuration. 

Compliant with puppet 2.7x and MySQL 5.1x (uses CHANGE MASTER TO not 'master-host' definitions in my.cnf)

#### /etc/hosts config
The alias, IP and FQDN variables for slave and master settings are for updates to the /etc/hosts file. Add these variables if you'd like your /etc/hosts to be automatically updated with network DNS information for your master-slave relationship, otherwise leave out. 

#### my.cnf configuration
Currently using a template located in /files but will be moving out into /templates once I build out the ERB definitions. Will accept server_id and mysql_database
from the 'replicate' module and server settings from mysql::params update based on $type. Right now it's a straight up file, edit at will if needed, located in /replicate/files

#### Multi-SQL Capable
Declare as many instances of replicate::slave or replicate::master as you'd like. 

#### Apparmor
I hate it in the context of MySQL and it's disabled by this module.  

I do have a section you can uncomment in the slave.pp file to sed paths into the apparmor usr.bin.mysqld file in apparmor.d/ that works off a ERB template but I could not get this to work (apparmor would still disable write and read in certain instances).
Since this is was developed for a production server and we don't use apparmor I disabled it all together. 

$apparmor if set to true will leave your apparmor config alone, you can add the paths neccessary or use the above commented section in slave.pp to configure, otherwise I recommend setting:

	apparmor => 'false',
	
in order to disable it cleanly. 

#### Notes
Dev was done on an Ubuntu 12.04 box. 

I have not tested in any other OS's. 

The InnoDB settings are taken from the my.cnf on scrappy, but stomped on a bit so we don't have 4GB datadir's. 

Since this was created to run multiple servers on one machine your slave or master will have it's own /etc/, datadir, .sock, .pid, my.cnf, and log directories.

$slave_server_id (OR $master_server_id) is the identifier in my.cnf for the following:

	/etc location 	=> /etc/mysql[$slave_server_id]/
	my.cnf			=> /etc/mysql[$slave_server_id]/my[$slave_server_id].cnf
	port			=> 30[$slave_server_id]
	socket			=> /var/run/mysqld/mysqld[$slave_server_id].sock
	pid-file		=> /var/run/mysqld/mysqld[$slave_server_id].pid
	datadir			=> /var/lib/mysql[$slave_server_id]
	log				=> /var/log/mysql[$slave_server_id]/mysql[$slave_server_id].log
	log_error		=> /var/log/mysql[$slave_server_id]/mysql[$slave_server_id]_error.log
	log_bin			=> /var/log/mysql[$slave_server_id]/mysql[$slave_server_id]-bin.log
	relay_log		=> /var/log/mysql[$slave_server_id]/mysql[$slave_server_id]-relay-bin.log

### Post-Run

Right now you pass a password but I have not set this on the SQL instance so once you connect SET THE PASSWORD!

Connect to mysql[$slave_server_id] or mysql[$master_server_id] with:

	mysql -uroot --socket=/var/run/mysqld/mysqld[$slave_server_id].sock 

To start an instance:
	
	mysqld_safe --socket=/var/run/mysqld[$slave_server_id].sock &
	
To stop an instance:

	mysqladmin -S /var/run/mysqld/mysqld[$slave_server_id].sock shutdown		
	
### Slave Configuration Example - Declared in Sites.pp or the like

	include replicate
	replicate::type {'slave':
		mysql_database				=> 'slave',
		master_host 				=> 'master.mysql.com',
		master_log_file				=> 'mysql-bin.000001',
		master_log_pos 				=> '0',
		mysql_root_password 		=> 'pass',
		mysql_replication_user 		=> 'repl',
		mysql_replication_password	=> 'pass',
		master_fqdn					=> 'master.mysql.com',
		master_ip					=> '10.0.2.15',
		master_alias				=> 'master',
		slave_server_id				=> '10',
		}
		
### Master Configuration Example 

	include replicate
	replicate::master{'mysql':
	#	mysql_database				=> 'master', # deprecated so $name=$mysql_database 
		mysql_root_password 		=> 'shd123',
		mysql_replication_user 		=> 'repl',
		mysql_replication_password	=> 'shd123',
		slave_fqdn					=> 'replicate.slave.dev', 
		slave_ip					=> '192.168.33.10', 
		slave_alias 				=> 'replicate',
		master_server_id			=> '12',
		require						=> Class['mysql::server'],
		}
		
### Multi-SQL Server - Mutli-Slave Example

	include replicate
	replicate::slave {'slave1':
		slave_server_id				=> '10',
		mysql_database				=> 'slave1',
		master_host 				=> 'master.mysql.com',
		master_log_file				=> 'mysql-bin.000001',
		master_log_pos 				=> '0',
		mysql_root_password 		=> 'password',
		mysql_replication_user 		=> 'repl',
		mysql_replication_password	=> 'pass',
		
		# Only declare these on your first MySQL server instance, for DNS purposes
		master_fqdn					=> 'master.mysql.com',
		master_ip					=> '192.168.1.67',
		master_alias				=> 'scrappy',
		}

	replicate::slave {'slave2':
		slave_server_id				=> '11',
		mysql_database				=> 'slave2',
		master_host 				=> 'master.mysql.com',
		master_log_file				=> 'mysql-bin.000001',
		master_log_pos 				=> '0',
		mysql_root_password 		=> 'pass',
		mysql_replication_user 		=> 'repl',
		mysql_replication_password	=> 'pass',
		}

When declaring multiple SQL instances ensure $name is different!
	
Declare DNS stuff once, preferably in your first SQL server instance:

		master_fqdn					=> 'master.mysql.com',
		master_ip					=> '192.168.1.67',
		master_alias				=> 'scrappy',

### Accepted variables:
	#### Global variables:
	$mysql_root_user - defaults root
	$mysql_root_password 	
	$mysql_root_database - defualts mysql
	$mysql_root_local_host - defaults localhost	
	
	#### Slave variables
	$mysql_replication_user 	
	$mysql_replication_password 
	$replica_server_id			

	#### Master variables
	$master_host				
	$master_log_file		
	$master_log_post
	$replica_host 				
	$replica_ip					
	$master_server_id 					
	$log_bin - defualts 'mysql-bin'			
	
